{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { getThemeProps } from \"../useThemeProps/index.js\";\nimport useTheme from \"../useThemeWithoutDefault/index.js\";\n// TODO React 17: Remove `useMediaQueryOld` once React 17 support is removed\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      setMatch(queryList.matches);\n    };\n    updateMatch();\n    queryList.addEventListener('change', updateMatch);\n    return () => {\n      queryList.removeEventListener('change', updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why\nconst safeReact = {\n  ...React\n};\nconst maybeReactUseSyncExternalStore = safeReact.useSyncExternalStore;\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      mediaQueryList.addEventListener('change', notify);\n      return () => {\n        mediaQueryList.removeEventListener('change', notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","map":{"version":3,"names":["React","useEnhancedEffect","getThemeProps","useTheme","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","match","setMatch","useState","matches","undefined","queryList","updateMatch","addEventListener","removeEventListener","safeReact","maybeReactUseSyncExternalStore","useSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","useCallback","getServerSnapshot","useMemo","getSnapshot","subscribe","mediaQueryList","notify","useMediaQuery","queryInput","options","theme","supportMatchMedia","window","name","props","process","env","NODE_ENV","console","error","join","replace","useMediaQueryImplementation","useDebugValue"],"sources":["C:/Users/Gustavo/mychat/node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { getThemeProps } from \"../useThemeProps/index.js\";\nimport useTheme from \"../useThemeWithoutDefault/index.js\";\n// TODO React 17: Remove `useMediaQueryOld` once React 17 support is removed\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      setMatch(queryList.matches);\n    };\n    updateMatch();\n    queryList.addEventListener('change', updateMatch);\n    return () => {\n      queryList.removeEventListener('change', updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why\nconst safeReact = {\n  ...React\n};\nconst maybeReactUseSyncExternalStore = safeReact.useSyncExternalStore;\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      mediaQueryList.addEventListener('change', notify);\n      return () => {\n        mediaQueryList.removeEventListener('change', notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}