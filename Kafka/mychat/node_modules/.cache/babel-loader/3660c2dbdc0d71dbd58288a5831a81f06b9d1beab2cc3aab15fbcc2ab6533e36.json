{"ast":null,"code":"'use client';\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n      event.stopPropagation();\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator,\n      onMouseDown: event => event.stopPropagation()\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleTagDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;","map":{"version":3,"names":["React","unstable_setRef","setRef","unstable_useEventCallback","useEventCallback","unstable_useControlled","useControlled","unstable_useId","useId","usePreviousProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","startsWith","includes","slice","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","listboxRef","current","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledProp","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionKey","getOptionLabelProp","label","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","isOptionEqualToValue","value","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","readOnly","selectOnFocus","valueProp","optionLabel","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","anchorEl","setAnchorEl","useState","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","name","setInputValueState","state","focused","setFocused","resetInputValue","useCallback","event","newValue","reason","isOptionSelected","length","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","previousProps","useEffect","valueChange","listboxAvailable","focusTag","tagToFocus","focus","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","indexOf","setSelectionRange","getPreviousHighlightedOptionIndex","isSameValue","value1","label1","label2","every","val","i","previousHighlightedOption","findIndex","syncHighlightedIndex","previousHighlightedOptionIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","nodeName","warn","join","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validTagIndex","handleFocusTag","nextTag","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseMove","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","type","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseMove","onTouchStart","expanded"],"sources":["C:/Users/Gustavo/mychat/node_modules/@mui/material/useAutocomplete/useAutocomplete.js"],"sourcesContent":["'use client';\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n      event.stopPropagation();\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator,\n      onMouseDown: event => event.stopPropagation()\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleTagDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}