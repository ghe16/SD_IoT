{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/material-ui/api/textarea-autosize/)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value,\n    ...other\n  } = props;\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const heightRef = React.useRef(null);\n  const shadowRef = React.useRef(null);\n  const calculateTextareaStyles = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0,\n        overflowing: false\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflowing\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const syncHeight = React.useCallback(() => {\n    const textareaStyles = calculateTextareaStyles();\n    if (isEmpty(textareaStyles)) {\n      return;\n    }\n    const outerHeightStyle = textareaStyles.outerHeightStyle;\n    const input = inputRef.current;\n    if (heightRef.current !== outerHeightStyle) {\n      heightRef.current = outerHeightStyle;\n      input.style.height = `${outerHeightStyle}px`;\n    }\n    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';\n  }, [calculateTextareaStyles]);\n  useEnhancedEffect(() => {\n    const handleResize = () => {\n      syncHeight();\n    };\n    // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [calculateTextareaStyles, syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  const handleChange = event => {\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", {\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n\n      rows: minRows,\n      style: style,\n      ...other\n    }), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: {\n        ...styles.shadow,\n        ...style,\n        paddingTop: 0,\n        paddingBottom: 0\n      }\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"names":["React","PropTypes","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","value","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","outerHeightStyle","overflowing","TextareaAutosize","forwardRef","props","forwardedRef","onChange","maxRows","minRows","style","other","current","isControlled","useRef","inputRef","handleRef","heightRef","shadowRef","calculateTextareaStyles","useCallback","input","containerWindow","computedStyle","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","syncHeight","textareaStyles","handleResize","rAF","rAFHandleResize","cancelAnimationFrame","requestAnimationFrame","debounceHandleResize","addEventListener","resizeObserver","ResizeObserver","process","env","NODE_ENV","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","ref","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"sources":["C:/Users/Gustavo/mychat/node_modules/@mui/material/TextareaAutosize/TextareaAutosize.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/material-ui/api/textarea-autosize/)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value,\n    ...other\n  } = props;\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const heightRef = React.useRef(null);\n  const shadowRef = React.useRef(null);\n  const calculateTextareaStyles = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0,\n        overflowing: false\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflowing\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const syncHeight = React.useCallback(() => {\n    const textareaStyles = calculateTextareaStyles();\n    if (isEmpty(textareaStyles)) {\n      return;\n    }\n    const outerHeightStyle = textareaStyles.outerHeightStyle;\n    const input = inputRef.current;\n    if (heightRef.current !== outerHeightStyle) {\n      heightRef.current = outerHeightStyle;\n      input.style.height = `${outerHeightStyle}px`;\n    }\n    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';\n  }, [calculateTextareaStyles]);\n  useEnhancedEffect(() => {\n    const handleResize = () => {\n      syncHeight();\n    };\n    // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [calculateTextareaStyles, syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  const handleChange = event => {\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", {\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: style,\n      ...other\n    }), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: {\n        ...styles.shadow,\n        ...style,\n        paddingTop: 0,\n        paddingBottom: 0\n      }\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}