{"ast":null,"code":"var _jsxFileName = \"/home/alumno/SD_IoT/Kafka/mychat/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [topics, setTopics] = useState([]); // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState(''); // Tópico seleccionado\n  const [messages, setMessages] = useState([]); // Mensajes del tópico seleccionado\n  const [isPolling, setIsPolling] = useState(false); // Estado para controlar el polling\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los tópicos', error);\n    }\n  };\n\n  // Cambiar el tópico cuando se selecciona uno nuevo\n  const changeTopic = async topic => {\n    setSelectedTopic(topic); // Actualizar el tópico seleccionado\n    setMessages([]); // Limpiar los mensajes anteriores\n    setIsPolling(true); // Iniciar el polling cuando se selecciona un tópico\n\n    try {\n      await axios.post('/api/change-topic/${topic}');\n    } catch (error) {\n      console.error('Error al cambiar el tópico', error);\n    }\n  };\n\n  // Obtener los mensajes del tópico actual\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get('/api/messages');\n      if (response.data.length > 0) {\n        setMessages(response.data); // Actualizar el estado con los mensajes\n        setIsPolling(false); // Detener el polling cuando se reciban mensajes\n      }\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n  useEffect(() => {\n    fetchTopics(); // Obtener la lista de tópicos al cargar la página\n  }, []);\n\n  // useEffect para hacer polling de los mensajes mientras no se reciban\n  useEffect(() => {\n    if (isPolling && selectedTopic) {\n      const interval = setInterval(() => {\n        fetchMessages(); // Consultar los mensajes cada 2 segundos\n      }, 2000);\n      return () => clearInterval(interval); // Limpiar el intervalo cuando ya no sea necesario\n    }\n  }, [isPolling, selectedTopic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Aplicaci\\xF3n de Chat con Kafka\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateTopicForm, {\n      onTopicCreated: fetchTopics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopicList, {\n      topics: topics,\n      onSelectTopic: changeTopic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), selectedTopic && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Mensajes en el t\\xF3pico: \", selectedTopic]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(MessageBox, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Enviar mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        topic: selectedTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LMlv9fV1u/sUaHSz4s2wzBoUed8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TopicList","MessageBox","SendMessageForm","CreateTopicForm","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","topics","setTopics","selectedTopic","setSelectedTopic","messages","setMessages","isPolling","setIsPolling","fetchTopics","response","get","data","error","console","changeTopic","topic","post","fetchMessages","length","interval","setInterval","clearInterval","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onTopicCreated","onSelectTopic","marginBottom","_c","$RefreshReg$"],"sources":["/home/alumno/SD_IoT/Kafka/mychat/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\n\nconst App = () => {\n  const [topics, setTopics] = useState([]);  // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState('');  // Tópico seleccionado\n  const [messages, setMessages] = useState([]);  // Mensajes del tópico seleccionado\n  const [isPolling, setIsPolling] = useState(false); // Estado para controlar el polling\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los tópicos', error);\n    }\n  };\n\n  // Cambiar el tópico cuando se selecciona uno nuevo\n  const changeTopic = async (topic) => {\n    setSelectedTopic(topic);  // Actualizar el tópico seleccionado\n    setMessages([]);  // Limpiar los mensajes anteriores\n    setIsPolling(true);  // Iniciar el polling cuando se selecciona un tópico\n\n    try {\n      await axios.post('/api/change-topic/${topic}');\n    } catch (error) {\n      console.error('Error al cambiar el tópico', error);\n    }\n  };\n\n  // Obtener los mensajes del tópico actual\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get('/api/messages');\n      if (response.data.length > 0) {\n        setMessages(response.data);  // Actualizar el estado con los mensajes\n        setIsPolling(false);  // Detener el polling cuando se reciban mensajes\n      }\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTopics();  // Obtener la lista de tópicos al cargar la página\n  }, []);\n\n  // useEffect para hacer polling de los mensajes mientras no se reciban\n  useEffect(() => {\n    if (isPolling && selectedTopic) {\n      const interval = setInterval(() => {\n        fetchMessages();  // Consultar los mensajes cada 2 segundos\n      }, 2000);\n\n      return () => clearInterval(interval);  // Limpiar el intervalo cuando ya no sea necesario\n    }\n  }, [isPolling, selectedTopic]);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Aplicación de Chat con Kafka</h1>\n\n      {/* Formulario para crear un nuevo tópico */}\n      <CreateTopicForm onTopicCreated={fetchTopics} />\n\n      {/* Desplegable para seleccionar un tópico */}\n      <TopicList topics={topics} onSelectTopic={changeTopic} />\n\n      {/* Mostrar mensajes del tópico seleccionado */}\n      {selectedTopic && (\n        <>\n          <h2>Mensajes en el tópico: {selectedTopic}</h2>\n          <div style={{ marginBottom: '30px' }}>\n            <MessageBox messages={messages} />\n          </div>\n\n          <h3>Enviar mensaje</h3>\n          <SendMessageForm topic={selectedTopic} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}