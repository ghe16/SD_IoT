{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gustavo\\\\mychat\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [topics, setTopics] = useState([]); // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState(''); // Tópico seleccionado\n  const [messages, setMessages] = useState([]); // Mensajes del tópico seleccionado\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los topicos', error);\n    }\n  };\n\n  // Función para obtener los mensajes de un tópico cuando se selecciona\n  const fetchMessages = async topic => {\n    try {\n      const response = await axios.get('/api/messages/${topic}');\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n  useEffect(() => {\n    fetchTopics();\n  }, []);\n  const handleTopicSelect = topic => {\n    setSelectedTopic(topic);\n    fetchMessages(topic);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Aplicaci\\xF3n de Chat con Kafka\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateTopicForm, {\n      onTopicCreated: fetchTopics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopicList, {\n      topics: topics,\n      onSelectTopic: handleTopicSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), selectedTopic && /*#__PURE__*/_jsxDEV(MessageBox, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }, this), selectedTopic && /*#__PURE__*/_jsxDEV(SendMessageForm, {\n      topic: selectedTopic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"dKXM+P+kSjG2bgjIPSYB3KIt1v4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TopicList","MessageBox","SendMessageForm","CreateTopicForm","axios","jsxDEV","_jsxDEV","App","_s","topics","setTopics","selectedTopic","setSelectedTopic","messages","setMessages","fetchTopics","response","get","data","error","console","fetchMessages","topic","handleTopicSelect","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onTopicCreated","onSelectTopic","_c","$RefreshReg$"],"sources":["C:/Users/Gustavo/mychat/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\n\nconst App = () => {\n  const [topics, setTopics] = useState([]);  // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState('');  // Tópico seleccionado\n  const [messages, setMessages] = useState([]);  // Mensajes del tópico seleccionado\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los topicos', error);\n    }\n  };\n\n  // Función para obtener los mensajes de un tópico cuando se selecciona\n  const fetchMessages = async (topic) => {\n    try {\n      const response = await axios.get('/api/messages/${topic}');\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTopics();\n  }, []);\n\n  const handleTopicSelect = (topic) => {\n    setSelectedTopic(topic);\n    fetchMessages(topic);\n  };\n\n  return (\n    <div style= {{padding: '20px'}}>\n      <h1>Aplicación de Chat con Kafka</h1>\n      \n      {/* Formulario para crear un nuevo tópico */}\n      <CreateTopicForm onTopicCreated={fetchTopics} />\n\n      {/* Desplegable para seleccionar un tópico */}\n      <TopicList topics={topics} onSelectTopic={handleTopicSelect} />\n\n      {/* Mostrar mensajes del tópico seleccionado */}\n      {selectedTopic && <MessageBox messages={messages} />}\n\n      {/* Formulario para enviar mensajes al tópico seleccionado */}\n      {selectedTopic && <SendMessageForm topic={selectedTopic} />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE/C;EACA,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,aAAa,CAAC;MAC/CP,SAAS,CAACM,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAME,aAAa,GAAG,MAAOC,KAAK,IAAK;IACrC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,wBAAwB,CAAC;MAC1DH,WAAW,CAACE,QAAQ,CAACE,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdgB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,iBAAiB,GAAID,KAAK,IAAK;IACnCV,gBAAgB,CAACU,KAAK,CAAC;IACvBD,aAAa,CAACC,KAAK,CAAC;EACtB,CAAC;EAED,oBACEhB,OAAA;IAAKkB,KAAK,EAAG;MAACC,OAAO,EAAE;IAAM,CAAE;IAAAC,QAAA,gBAC7BpB,OAAA;MAAAoB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGrCxB,OAAA,CAACH,eAAe;MAAC4B,cAAc,EAAEhB;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGhDxB,OAAA,CAACN,SAAS;MAACS,MAAM,EAAEA,MAAO;MAACuB,aAAa,EAAET;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG9DnB,aAAa,iBAAIL,OAAA,CAACL,UAAU;MAACY,QAAQ,EAAEA;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAGnDnB,aAAa,iBAAIL,OAAA,CAACJ,eAAe;MAACoB,KAAK,EAAEX;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnDID,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAqDT,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}