{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gustavo\\\\mychat\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [topics, setTopics] = useState([]); // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState(''); // Tópico seleccionado\n  const [messages, setMessages] = useState([]); // Mensajes del tópico seleccionado\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los tópicos', error);\n    }\n  };\n\n  // Cambiar el tópico cuando se selecciona uno nuevo\n  const changeTopic = async topic => {\n    console.log('Tópico seleccionado:', topic); // Log para verificar el tópico seleccionado\n    setSelectedTopic(topic); // Actualizar el tópico seleccionado\n\n    try {\n      await axios.post(`/api/change-topic/${topic}`);\n      fetchMessages(); // Obtener los mensajes del nuevo tópico\n    } catch (error) {\n      console.error('Error al cambiar el tópico', error);\n    }\n  };\n\n  // Obtener los mensajes del tópico actual\n  const fetchMessages = async () => {\n    if (!selectedTopic) {\n      console.error('No se ha seleccionado ningún tópico'); // Log de error si el tópico no está definido\n      return;\n    }\n    try {\n      console.log('Obteniendo mensajes para el tópico:', selectedTopic); // Log para verificar el tópico\n      const response = await axios.get('/api/messages');\n      setMessages(response.data); // Actualizar el estado con los mensajes\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n  useEffect(() => {\n    fetchTopics(); // Obtener la lista de tópicos al cargar la página\n  }, []);\n\n  // useEffect para obtener mensajes cada vez que el tópico cambie\n  useEffect(() => {\n    if (selectedTopic) {\n      fetchMessages(); // Obtener mensajes del nuevo tópico\n    }\n  }, [selectedTopic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Aplicaci\\xF3n de Chat con Kafka\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateTopicForm, {\n      onTopicCreated: fetchTopics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopicList, {\n      topics: topics,\n      onSelectTopic: changeTopic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), selectedTopic ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Mensajes en el t\\xF3pico: \", selectedTopic]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageBox, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SendMessageForm, {\n        topic: selectedTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Selecciona un t\\xF3pico para ver los mensajes y enviar mensajes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"iY745WTjzX7o0w5HwISExCoVU84=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TopicList","MessageBox","SendMessageForm","CreateTopicForm","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","topics","setTopics","selectedTopic","setSelectedTopic","messages","setMessages","fetchTopics","response","get","data","error","console","changeTopic","topic","log","post","fetchMessages","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onTopicCreated","onSelectTopic","_c","$RefreshReg$"],"sources":["C:/Users/Gustavo/mychat/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TopicList from './components/TopicList';\nimport MessageBox from './components/MessageBox';\nimport SendMessageForm from './components/SendMessageForm';\nimport CreateTopicForm from './components/CreateTopicForm';\nimport axios from 'axios';\n\nconst App = () => {\n  const [topics, setTopics] = useState([]);  // Lista de tópicos\n  const [selectedTopic, setSelectedTopic] = useState('');  // Tópico seleccionado\n  const [messages, setMessages] = useState([]);  // Mensajes del tópico seleccionado\n\n  // Función para obtener los tópicos desde el backend\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('/api/topics');\n      setTopics(response.data);\n    } catch (error) {\n      console.error('Error al obtener los tópicos', error);\n    }\n  };\n\n  // Cambiar el tópico cuando se selecciona uno nuevo\n  const changeTopic = async (topic) => {\n    console.log('Tópico seleccionado:', topic);  // Log para verificar el tópico seleccionado\n    setSelectedTopic(topic);  // Actualizar el tópico seleccionado\n\n    try {\n      await axios.post(`/api/change-topic/${topic}`);\n      fetchMessages();  // Obtener los mensajes del nuevo tópico\n    } catch (error) {\n      console.error('Error al cambiar el tópico', error);\n    }\n  };\n\n  // Obtener los mensajes del tópico actual\n  const fetchMessages = async () => {\n    if (!selectedTopic) {\n      console.error('No se ha seleccionado ningún tópico');  // Log de error si el tópico no está definido\n      return;\n    }\n    try {\n      console.log('Obteniendo mensajes para el tópico:', selectedTopic);  // Log para verificar el tópico\n      const response = await axios.get('/api/messages');\n      setMessages(response.data);  // Actualizar el estado con los mensajes\n    } catch (error) {\n      console.error('Error al obtener los mensajes', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTopics();  // Obtener la lista de tópicos al cargar la página\n  }, []);\n\n  // useEffect para obtener mensajes cada vez que el tópico cambie\n  useEffect(() => {\n    if (selectedTopic) {\n      fetchMessages();  // Obtener mensajes del nuevo tópico\n    }\n  }, [selectedTopic]);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Aplicación de Chat con Kafka</h1>\n      \n      {/* Formulario para crear un nuevo tópico */}\n      <CreateTopicForm onTopicCreated={fetchTopics} />\n\n      {/* Desplegable para seleccionar un tópico */}\n      <TopicList topics={topics} onSelectTopic={changeTopic} />\n\n      {/* Mostrar mensajes del tópico seleccionado */}\n      {selectedTopic ? (\n        <>\n          <h2>Mensajes en el tópico: {selectedTopic}</h2>\n          <MessageBox messages={messages} />\n          <SendMessageForm topic={selectedTopic} /> {/* Formulario para enviar mensajes */}\n        </>\n      ) : (\n        <p>Selecciona un tópico para ver los mensajes y enviar mensajes</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}