{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport getDisplayName from '@mui/utils/getDisplayName';\nimport { getThemeProps } from '@mui/system/useThemeProps';\nimport useTheme from \"../styles/useTheme.js\";\nimport useEnhancedEffect from \"../utils/useEnhancedEffect.js\";\nimport useMediaQuery from \"../useMediaQuery/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n// By default, returns true if screen width is the same or greater than the given breakpoint.\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n};\n\n// By default, returns true if screen width is less than the given breakpoint.\nexport const isWidthDown = (breakpoint, width, inclusive = false) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n    const {\n      initialWidth,\n      width,\n      ...other\n    } = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props\n    });\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n    const more = {\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption,\n      ...(withThemeOption ? {\n        theme\n      } : {}),\n      ...other\n    };\n\n    // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n    if (more.width === undefined) {\n      return null;\n    }\n    return /*#__PURE__*/_jsx(Component, {\n      ...more\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use a heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n  } : void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n  return WithWidth;\n};\nexport default withWidth;","map":{"version":3,"names":["React","PropTypes","getDisplayName","getThemeProps","useTheme","useEnhancedEffect","useMediaQuery","jsx","_jsx","breakpointKeys","isWidthUp","breakpoint","width","inclusive","indexOf","isWidthDown","withWidth","options","Component","withTheme","withThemeOption","noSSR","initialWidth","initialWidthOption","WithWidth","props","contextTheme","theme","other","name","mountedState","setMountedState","useState","keys","breakpoints","slice","reverse","widthComputed","reduce","output","key","matches","up","more","undefined","process","env","NODE_ENV","propTypes","oneOf","object","displayName"],"sources":["/home/alumno/SD_IoT/Kafka/mychat/node_modules/@mui/material/Hidden/withWidth.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport getDisplayName from '@mui/utils/getDisplayName';\nimport { getThemeProps } from '@mui/system/useThemeProps';\nimport useTheme from \"../styles/useTheme.js\";\nimport useEnhancedEffect from \"../utils/useEnhancedEffect.js\";\nimport useMediaQuery from \"../useMediaQuery/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n// By default, returns true if screen width is the same or greater than the given breakpoint.\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n};\n\n// By default, returns true if screen width is less than the given breakpoint.\nexport const isWidthDown = (breakpoint, width, inclusive = false) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n    const {\n      initialWidth,\n      width,\n      ...other\n    } = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props\n    });\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n    const more = {\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption,\n      ...(withThemeOption ? {\n        theme\n      } : {}),\n      ...other\n    };\n\n    // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n    if (more.width === undefined) {\n      return null;\n    }\n    return /*#__PURE__*/_jsx(Component, {\n      ...more\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use a heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n  } : void 0;\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n  return WithWidth;\n};\nexport default withWidth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}